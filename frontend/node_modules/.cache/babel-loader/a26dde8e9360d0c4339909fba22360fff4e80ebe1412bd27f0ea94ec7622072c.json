{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\DevPal\\\\frontend\\\\src\\\\Components\\\\ChatWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.body) throw new Error(\"No response body\");\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let botReply = \"\";\n      const botMsgIndex = newMessages.length;\n\n      // Add placeholder for bot message\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"\"\n      }]);\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        botReply += decoder.decode(value, {\n          stream: true\n        });\n\n        // Update bot message as chunks arrive\n        setMessages(prev => {\n          const updated = [...prev];\n          updated[botMsgIndex] = {\n            sender: \"bot\",\n            text: botReply\n          };\n          return updated;\n        });\n      }\n    } catch (error) {\n      console.error(\"Streaming error:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"⚠️ Server error\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"400px\",\n      height: \"500px\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"8px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      backgroundColor: \"white\",\n      padding: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        overflowY: \"auto\",\n        marginBottom: \"10px\"\n      },\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.sender === \"user\" ? \"right\" : \"left\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            display: \"inline-block\",\n            padding: \"8px\",\n            margin: \"4px\",\n            borderRadius: \"6px\",\n            background: msg.sender === \"user\" ? \"#007bff\" : \"#e5e5ea\",\n            color: msg.sender === \"user\" ? \"white\" : \"black\"\n          },\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"left\",\n          fontStyle: \"italic\",\n          color: \"gray\"\n        },\n        children: \"Bot is typing\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        style: {\n          flex: 1,\n          padding: \"8px\"\n        },\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        style: {\n          marginLeft: \"5px\",\n          padding: \"8px 12px\",\n          background: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"4px\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"2EtKFeyfmqZFwnUIRz975CN53v4=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","sendMessage","trim","newMessages","sender","text","response","fetch","method","headers","body","JSON","stringify","message","Error","reader","getReader","decoder","TextDecoder","botReply","botMsgIndex","length","prev","done","value","read","decode","stream","updated","error","console","style","width","height","border","borderRadius","display","flexDirection","backgroundColor","padding","children","flex","overflowY","marginBottom","map","msg","index","textAlign","margin","background","color","fileName","_jsxFileName","lineNumber","columnNumber","fontStyle","type","onChange","e","target","placeholder","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/Project/DevPal/frontend/src/Components/ChatWindow.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { sender: \"user\", text: input }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:8000/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      if (!response.body) throw new Error(\"No response body\");\r\n\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n      let botReply = \"\";\r\n      const botMsgIndex = newMessages.length;\r\n\r\n      // Add placeholder for bot message\r\n      setMessages((prev) => [...prev, { sender: \"bot\", text: \"\" }]);\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        botReply += decoder.decode(value, { stream: true });\r\n\r\n        // Update bot message as chunks arrive\r\n        setMessages((prev) => {\r\n          const updated = [...prev];\r\n          updated[botMsgIndex] = { sender: \"bot\", text: botReply };\r\n          return updated;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Streaming error:\", error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"⚠️ Server error\" },\r\n      ]);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"400px\",\r\n        height: \"500px\",\r\n        border: \"1px solid #ccc\",\r\n        borderRadius: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: \"white\",\r\n        padding: \"10px\",\r\n      }}\r\n    >\r\n      <div style={{ flex: 1, overflowY: \"auto\", marginBottom: \"10px\" }}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{ textAlign: msg.sender === \"user\" ? \"right\" : \"left\" }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"inline-block\",\r\n                padding: \"8px\",\r\n                margin: \"4px\",\r\n                borderRadius: \"6px\",\r\n                background: msg.sender === \"user\" ? \"#007bff\" : \"#e5e5ea\",\r\n                color: msg.sender === \"user\" ? \"white\" : \"black\",\r\n              }}\r\n            >\r\n              {msg.text}\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div style={{ textAlign: \"left\", fontStyle: \"italic\", color: \"gray\" }}>\r\n            Bot is typing…\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          style={{ flex: 1, padding: \"8px\" }}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          style={{\r\n            marginLeft: \"5px\",\r\n            padding: \"8px 12px\",\r\n            background: \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"4px\",\r\n          }}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}